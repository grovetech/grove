I"Ê<p>We have all had that moment where you save and save your files into your Google drive folder only to find out that days prior the Google Drive app had somehow stopped sycing your files. You need to get a file from Google Drive because your computer‚Äôs battery is dead and the files are not in the cloud.</p>

<p>This is a more common problem then you might think. If its not Google Drive it could be another app that you rely on. Dashlane, LastPass, and Crashplan are other great examples of programs that you would expect would stay running behind the scenes on your computer.</p>

<p>Imagine being able to be notified when a program isnt running. Better yet be notified via email. You can sign up for a free SendGrid account and use that to relay mail. Here is how you do it. In the script below change the name of the app to the app you want to monitor.</p>

<p>Configure the API key and other information from your SendGrid account and setup a cron task. Lets dive deeper.</p>

<h3 id="the-monitoring-script">The Monitoring Script</h3>
<hr />

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>

<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="si">$(</span>ps axo pid,command | <span class="nb">grep</span> <span class="s2">"[G]oogle Drive.app"</span><span class="si">)</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span>open <span class="nt">-a</span> Google<span class="se">\ </span>Drive.app
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"Running"</span>
<span class="k">fi</span></code></pre></figure>

<p>As you can see this part of the script runs and checks if Google Drive is running. If its running it says ‚ÄúRunning‚Äù if it doesnt then it opens the Google Drive program. This is great for those pesky apps that just seem to quit all the time.</p>

<h3 id="intgrating-email-notifications">Intgrating Email Notifications</h3>
<hr />

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">SGTO</span><span class="o">=</span><span class="s2">"someone@somesone.com"</span>
<span class="nv">SGTONAME</span><span class="o">=</span><span class="s1">'Your Name'</span>
<span class="nv">SGSUBJECT</span><span class="o">=</span><span class="s1">'Google Drive just quit!'</span>
<span class="nv">SGFROM</span><span class="o">=</span>youremail@youremail.com
<span class="nv">SGTEXT</span><span class="o">=</span><span class="s1">'The Google Drive app just quit, it was relaunched. Just letting you know.'</span>
<span class="nv">SGUSER</span><span class="o">=</span>&lt;Your Sendgrid Username&gt;
<span class="nv">SGPASS</span><span class="o">=</span><span class="s1">'&lt;Your Sendgrid Password&gt;'</span>
curl <span class="nt">-d</span> <span class="s2">"to=</span><span class="k">${</span><span class="nv">SGTO</span><span class="k">}</span><span class="s2">&amp;toname=</span><span class="k">${</span><span class="nv">SGTONAME</span><span class="k">}</span><span class="s2">&amp;subject=</span><span class="k">${</span><span class="nv">SGSUBJECT</span><span class="k">}</span><span class="s2">&amp;text=</span><span class="k">${</span><span class="nv">SGTEXT</span><span class="k">}</span><span class="s2">&amp;from=</span><span class="k">${</span><span class="nv">SGFROM</span><span class="k">}</span><span class="s2">&amp;api_user=</span><span class="k">${</span><span class="nv">SGUSER</span><span class="k">}</span><span class="s2">&amp;api_key=</span><span class="k">${</span><span class="nv">SGPASS</span><span class="k">}</span><span class="s2">"</span> https://api.sendgrid.com/api/mail.send.json</code></pre></figure>

<p>As you can see configuring email via a script is as easy as signing up for a free SendGrid account and configuring the above variables. The 2 that are important are the SGUSER which is your SendGrid username and your SGPASS which is yoru SendGrid password.</p>

<p>You will want to install this script inside the loop like this.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>

<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="si">$(</span>ps axo pid,command | <span class="nb">grep</span> <span class="s2">"[G]oogle Drive.app"</span><span class="si">)</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
</span>open <span class="nt">-a</span> Google<span class="se">\ </span>Drive.app
    
<span class="nv">SGTO</span><span class="o">=</span><span class="s2">"someone@somesone.com"</span>
<span class="nv">SGTONAME</span><span class="o">=</span><span class="s1">'Your Name'</span>
<span class="nv">SGSUBJECT</span><span class="o">=</span><span class="s1">'Google Drive just quit!'</span>
<span class="nv">SGFROM</span><span class="o">=</span>youremail@youremail.com
<span class="nv">SGTEXT</span><span class="o">=</span><span class="s1">'The Google Drive app just quit, it was relaunched. Just letting you know.'</span>
<span class="nv">SGUSER</span><span class="o">=</span>&lt;Your Sendgrid Username&gt;
<span class="nv">SGPASS</span><span class="o">=</span><span class="s1">'&lt;Your Sendgrid Password&gt;'</span>

curl <span class="nt">-d</span>  <span class="s2">"to=</span><span class="k">${</span><span class="nv">SGTO</span><span class="k">}</span><span class="s2">&amp;toname=</span><span class="k">${</span><span class="nv">SGTONAME</span><span class="k">}</span><span class="s2">&amp;subject=</span><span class="k">${</span><span class="nv">SGSUBJECT</span><span class="k">}</span><span class="s2">&amp;text=</span><span class="k">${</span><span class="nv">SGTEXT</span><span class="k">}</span><span class="s2">&amp;from=</span><span class="k">${</span><span class="nv">SGFROM</span><span class="k">}</span><span class="s2">&amp;api_user=</span><span class="k">${</span><span class="nv">SGUSER</span><span class="k">}</span><span class="s2">&amp;api_key=</span><span class="k">${</span><span class="nv">SGPASS</span><span class="k">}</span><span class="s2">"</span> https://api.sendgrid.com/api/mail.send.json
  
<span class="k">else
    </span><span class="nb">echo</span> <span class="s2">"Running"</span>
<span class="k">fi</span></code></pre></figure>

<p>As you can see the email notifications will only trigger if the app needs to be re-launched.</p>

<h3 id="schedule-the-task">Schedule the task</h3>
<hr />
<p>To install this simply copy the script to a file on your server. My favorite method for doing this is using touch.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">bash-3.2<span class="nv">$ </span><span class="nb">touch</span> /location/of/where/you/want/the/script/myscript.sh</code></pre></figure>

<p>Once done, change the permissions on the file to allow it to execute.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">bash-3.2<span class="nv">$ </span><span class="nb">chmod </span>777 /location/of/where/you/want/the/script/myscript.sh</code></pre></figure>

<p>To schedule this setup a CRON JOB on your server by running these commands</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">bash-3.2<span class="nv">$ </span>crontab <span class="nt">-e</span></code></pre></figure>

<p>Once you enter into the cron editor add this line and then save the file.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">0 <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> /bin/bash /location/of/where/you/want/the/script/myscript.sh</code></pre></figure>

<p>Remember to change the path and the name of the script to match your actual script.</p>

<h3 id="conclusion">Conclusion</h3>
<hr />
<p>Until apps become more reliable especially the ones that we need to make sure are always running this little script makes a handy tool that you can leave running on your Mac. Whenever an app you care about crashes it will automatically re-open on the schedule that you set via cron.</p>
:ET