I"æ<p>I have been struggling for years trying to get NSRect to play nicely and draw a cool looking responsive graph in a Cocoa application. I was trying to create a controller that could be used with iOS and Mac OSX and I found that the two had too many internal differences for one controller class to make sense.</p>

<p>As a novice Cocoa Programmer I turned to HTML &amp; CSS. I created the Animal Age program as a test, and included some static data and it worked. The premise is simple. Create a responsive CSS3 graph. Pass its width variable via Cocoa to a Javascript Function. Then display the graph.</p>

<p>After months of perfecting I finally had something that worked, that was cross platform compatible and was easy to style. Below are the steps that you need to take my GitHub project and up and running in your app quickly and easily.</p>

<p>First import all the HTML files into your project, these are located in the /GraphFiles directory. The index.html file is the file that is used to generate the graph. The file has inline CSS that you can alter to change the style of the graph. The CSS3 transform components make the graph animate as its called into view.</p>

<p>The next step is to get the Sum of each column of data, I created an Array Controller that does just that. If you look at the array controller it controls the data going into each column that is bound to the Shared User Defaults Controller and each sum field is also connected to the Graph Controller.</p>

<p>ArrayController.m : Subclass of NSArrayController</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#import "iArrayController.h"</span>
@implementation iArrayController
-<span class="o">(</span>void<span class="o">)</span>awakeFromNib
<span class="o">{</span>
	//Sorting at startup
	NSSortDescriptor<span class="k">*</span> SortDescriptor <span class="o">=</span> <span class="o">[</span>NSSortDescriptor alloc] initWithKey:@<span class="s2">"artist"</span> ascending:YES selector:@selector<span class="o">(</span>compare:<span class="o">)]</span> autorelease]<span class="p">;</span>
	<span class="o">[</span>self setSortDescriptors:[NSArray arrayWithObject:SortDescriptor]]<span class="p">;</span>
	//need to initialize the array
	<span class="o">[</span>super awakeFromNib]<span class="p">;</span>  
    //bind text colums to tex fields.
    <span class="o">[</span>textField <span class="nb">bind</span>: @<span class="s2">"value"</span> toObject: self withKeyPath:@<span class="s2">"arrangedObjects.@sum.rating"</span> options:nil]<span class="p">;</span>
    <span class="o">[</span>textField2 <span class="nb">bind</span>: @<span class="s2">"value"</span> toObject: self withKeyPath:@<span class="s2">"arrangedObjects.@sum.time"</span> options:nil]<span class="p">;</span>
    <span class="o">[</span>textField3 <span class="nb">bind</span>: @<span class="s2">"value"</span> toObject: self withKeyPath:@<span class="s2">"arrangedObjects.@sum.track"</span> options:nil]<span class="p">;</span>
<span class="o">}</span>
@end</code></pre></figure>

<p>As you can see this controller handles the sum values of the different columns in the project. These are outputted to the connected text fields in the info panel. The values are being fed into these fields and summed by their programatic binding to the arrangedObjects keyPath which is where the data is stored.</p>

<p>Now that we have the sum values of each column we can pass that data into our WebView or GraphController. The graph controller is a subclass of WebView so you need to change the class in the Xcode Info Panel. This is not an object the outputs for this will live right on the web view itself. We need to connect the ArrayController to the Web View. Lastly the WebView must be setup as a delegate of App Delegate.</p>

<p>GraphController : Subclass of WebView</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#import "GraphController.h"</span>

@implementation GraphController
-<span class="o">(</span>void<span class="o">)</span>drawGraphFromSelectedList
<span class="o">{</span>
    //Convert the item1 into an Integer
    NSString <span class="k">*</span>item1 <span class="o">=</span> <span class="o">[</span>textField stringValue]<span class="p">;</span>
    //Convert the item2 into an Integer
    NSString <span class="k">*</span>item2 <span class="o">=</span> <span class="o">[</span>textField2 stringValue]<span class="p">;</span>
    //Convert the item3 into an Integer
    NSString <span class="k">*</span>item3 <span class="o">=</span> <span class="o">[</span>textField3 stringValue]<span class="p">;</span>
    //pass that to webview with javascript
    NSString <span class="k">*</span>javascriptString <span class="o">=</span> <span class="o">[</span>NSString stringWithFormat:@<span class="s2">"myFunction('%@','%@','%@')"</span>, item1, item2, item3]<span class="p">;</span>
    <span class="o">[</span>self stringByEvaluatingJavaScriptFromString:javascriptString]<span class="p">;</span>
<span class="o">}</span>

- <span class="o">(</span>void<span class="o">)</span> drawRect: <span class="o">(</span>NSRect<span class="o">)</span> rect
<span class="o">{</span>
    <span class="o">[</span> self drawGraphFromSelectedList <span class="o">]</span><span class="p">;</span>
<span class="o">}</span>

- <span class="o">(</span>void<span class="o">)</span>awakeFromNib
<span class="o">{</span>
<span class="o">[</span>iArrayController addObserver:self forKeyPath:@<span class="s2">"arrangedObjects"</span>
                        options: NSKeyValueObservingOptionNew  context:NULL]<span class="p">;</span>

<span class="o">}</span>

- <span class="o">(</span>IBAction<span class="o">)</span>refreshData:<span class="o">(</span><span class="nb">id</span><span class="o">)</span>sender <span class="o">{</span>
    <span class="o">[</span>tableView reloadData]<span class="p">;</span>
    <span class="o">[</span> self drawGraphFromSelectedList <span class="o">]</span><span class="p">;</span>
<span class="o">}</span>

- <span class="o">(</span>void<span class="o">)</span>observeValueForKeyPath:<span class="o">(</span>NSString <span class="k">*</span><span class="o">)</span>keyPath ofObject:<span class="o">(</span><span class="nb">id</span><span class="o">)</span>object
                     change:<span class="o">(</span>NSDictionary <span class="k">*</span><span class="o">)</span>change context:<span class="o">(</span>void <span class="k">*</span><span class="o">)</span>context
<span class="o">{</span>
    <span class="k">if</span> <span class="o">([</span>keyPath isEqual:@<span class="s2">"arrangedObjects"</span><span class="o">])</span>

    <span class="o">{</span>
        <span class="o">[</span> self setNeedsDisplay: YES <span class="o">]</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
@end</code></pre></figure>

<p>Now that you have everything hooked up when you change the data in the NSTableView and then refresh the data it will re-draw the graph. The data is sent from the GraphController through a Javascript call, this sends the sum value to the web view and to the specific javascript function that takes that value and then passes it on to set the width of the DIV item.</p>

<p>Because of the CSS3 transform on the DIV the bar animates into view!</p>
:ET